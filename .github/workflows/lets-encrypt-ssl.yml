name: CI/CD for SSL Letsencrypt

on:
  push:
    branches:
      - main

jobs:
  Test_build_and_deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Images
        run: |
          docker build --no-cache -t ${{ secrets.DOCKER_USERNAME }}/money-tracker-frontend:latest ./frontend
          docker push ${{ secrets.DOCKER_USERNAME }}/money-tracker-frontend:latest
          docker build --no-cache -t ${{ secrets.DOCKER_USERNAME }}/money-tracker-backend:latest ./backend
          docker push ${{ secrets.DOCKER_USERNAME }}/money-tracker-backend:latest

      - name: Set up SSH key for EC2
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Test SSH Connection
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ec2-user@${{ secrets.EC2_HOST_DNS }} "echo SSH connection successful"

      - name: SSH into EC2 Instance and deploy with Docker Compose
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST_DNS }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e

            # Export Docker Hub username
            export DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}

            # Detect Amazon Linux version
            if [ -f /etc/os-release ]; then
              . /etc/os-release
              if [[ "$VERSION_ID" == "2" ]]; then
                PKG_MANAGER="yum"
              else
                PKG_MANAGER="dnf"
              fi
            else
              PKG_MANAGER="yum"
            fi

            echo "Using package manager: $PKG_MANAGER"

            # Update system
            sudo $PKG_MANAGER upgrade -y

            # Install Git if missing
            if ! command -v git &> /dev/null; then
              echo "Installing Git..."
              sudo $PKG_MANAGER install -y git
            fi

            TARGET_DIR="$(echo "${{ secrets.EC2_TARGET_DIR }}" | tr -d '\r\n')"
            REPO_URL="https://github.com/amihsan/money-tracker.git"

            # Check if the target directory is already a git repository
            # Ensure target directory exists
            mkdir -p "$TARGET_DIR"
            cd "$TARGET_DIR" || { echo "Failed to cd into $TARGET_DIR"; exit 1; }

            if [ -d ".git" ]; then
                echo "Repository exists. Updating..."
                git fetch origin main
                git rebase origin/main
            else
                echo "Directory exists but is not a git repo. Initializing..."
                git init
                git remote add origin "$REPO_URL"
                git fetch origin main
                git checkout -b main
                git pull origin main --allow-unrelated-histories
            fi

            echo "Deployment updated successfully!"





            # Update known_hosts to prevent SSH issues
            mkdir -p ~/.ssh
            ssh-keyscan -H ${{ secrets.EC2_HOST_DNS }} >> ~/.ssh/known_hosts

            # Install Docker if missing
            if ! command -v docker &> /dev/null; then
              echo "Installing Docker..."
              sudo $PKG_MANAGER install -y docker
              sudo systemctl enable docker
              sudo systemctl start docker
              sudo usermod -aG docker ${{ secrets.EC2_USERNAME }}
            fi

            # Ensure Docker is running
            if ! sudo systemctl is-active --quiet docker; then
              echo "Starting Docker service..."
              sudo systemctl start docker
            fi

            # Install Docker Compose if missing
            if ! command -v docker-compose &> /dev/null; then
              echo "Installing Docker Compose..."
              sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
            fi

            echo "Docker Compose version:"
            docker-compose version

            # Navigate to target directory (ensure repo exists)
            if [ ! -d "${{ secrets.EC2_TARGET_DIR }}" ]; then
              mkdir -p ${{ secrets.EC2_TARGET_DIR }}
            fi
            cd ${{ secrets.EC2_TARGET_DIR }}

            # Deploy containers
            echo "Deploying containers with Docker Compose..."

            # Pull new images and recreate changed services
            docker-compose pull
            docker-compose up -d --remove-orphans

            # Cleanup dangling images only
            docker image prune -f
            
            # For Production
            chmod +x ./init-letsencrypt.sh
            sudo ./init-letsencrypt.sh
